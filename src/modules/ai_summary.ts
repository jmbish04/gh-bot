import { runAI } from "./ai";

type Env = {
  CF_ACCOUNT_ID: string
  CF_API_TOKEN: string
  SUMMARY_CF_MODEL: string
  AI?: any
}

/**
 * Summarizes a pull request using AI.
 *
 * @param env - The environment bindings, including AI model configurations.
 * @param param1 - An object containing the pull request and its associated files.
 * @returns A summary of the pull request generated by the AI model.
 */
export async function summarizePRWithAI(env: Env, { pr, files }: any) {
  try {
    // Build a compact prompt
    const changed = (files || []).slice(0, 50).map((f:any) =>
      `- ${f.filename} (${f.status}${f.additions?`, +${f.additions}`:''}${f.deletions?`, -${f.deletions}`:''})`
    ).join('\n')

    const prompt = `Summarize this pull request for a technical reviewer.
Keep it to 6 bullets: intent, major changes, risk areas, tests, migration/ops impact, follow-ups.
Title: ${pr.title}
Author: ${pr.user?.login}
Files changed (${files?.length || 0}):
${changed}
PR body:
${(pr.body || '').slice(0, 3000)}`

    const result: any = await runAI({ env, model: env.SUMMARY_CF_MODEL, payload: { prompt } })
    return result?.response || 'No summary generated.'
  } catch (error) {
    console.log('AI summary generation failed:', error)
    return `**PR Summary** (generated without AI)

**Title:** ${pr.title}
**Author:** ${pr.user?.login || 'Unknown'}
**Files changed:** ${files?.length || 0}

This PR contains changes that require manual review. AI summarization was not available.`
  }
}
