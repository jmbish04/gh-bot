// Workers AI summarizer; swap to OpenAI fetch if you prefer
type RunArgs = { env: any; model: string; payload: any }

export async function runAI({ env, model, payload }: RunArgs) {
  /**
   * Executes an AI model using the provided environment and payload.
   *
   * @param args - An object containing the environment, model name, and payload for the AI execution.
   * @returns The result of the AI execution.
   */

  // Prefer binding if present
  if (env?.AI?.run) {
    return await env.AI.run(model, payload)
  }
  // Fallback to REST (needs CF_ACCOUNT_ID + CF_API_TOKEN in env)
  const url = `https://api.cloudflare.com/client/v4/accounts/${env.CF_ACCOUNT_ID}/ai/run/${encodeURIComponent(model)}`
  const r = await fetch(url, {
    method: 'POST',
    headers: { Authorization: `Bearer ${env.CF_API_TOKEN}` },
    body: JSON.stringify(payload)
  })
  if (!r.ok) throw new Error(`AI REST call failed: ${r.status}`)
  const data = (await r.json()) as any;
  return data.result
}

export async function summarizeRepo(env: { CF_ACCOUNT_ID: string; CF_API_TOKEN: string; SUMMARY_CF_MODEL: string; }, { meta, readme }: any) {
  /**
   * Summarizes a repository using AI.
   *
   * @param env - The environment bindings, including AI model configurations.
   * @param param1 - An object containing metadata and the repository's README.
   * @returns A summary of the repository generated by the AI model.
   */

  const prompt = `Summarize this repo in ~5 lines for an internal catalog.
Name: ${meta.full_name}
Topics: ${(meta.topics||[]).join(', ')}
Description: ${meta.description || '-'}
README:
${(readme || '').slice(0, 6000)}`
  const result = await runAI({ env, model: env.SUMMARY_CF_MODEL, payload: { prompt } })
  return result?.response || ''
}
